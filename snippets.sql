-- phpMyAdmin SQL Dump
-- version 5.1.3
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Oct 31, 2022 at 02:38 PM
-- Server version: 10.5.15-MariaDB-0+deb11u1
-- PHP Version: 7.4.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `WS301022_useful`
--

-- --------------------------------------------------------

--
-- Table structure for table `snippets`
--

CREATE TABLE `snippets` (
  `id` int(255) NOT NULL,
  `title` varchar(64) DEFAULT NULL,
  `language` varchar(32) DEFAULT NULL,
  `contents` longtext DEFAULT NULL,
  `timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `snippets`
--

INSERT INTO `snippets` (`id`, `title`, `language`, `contents`, `timestamp`) VALUES
(3, 'Jack\'s Regex Cheat Sheet', 'php', '//Check for Valid Email\r\nfunction CheckValidEmail($value) {\r\n    if (preg_match(\"/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\", $value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n//Check for Valid URL\r\nfunction CheckValidURL($value) {\r\n    if (preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\", $value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n//Check for Valid IPv4\r\nfunction CheckValidIPv4($value) {\r\n    if (preg_match(\"/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\", $value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n//Check for Valid IPv6\r\nfunction CheckValidIPv6($value) {\r\n    if (preg_match(\"/^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/\", $value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n//Check for Strong Password\r\nfunction CheckStrongPassword($value) {\r\n    if (preg_match(\"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&]{8,}/\", $value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}', '2022-03-04 02:54:41'),
(4, 'Node.js Express setup', 'node', 'const express = require(\"express\");\r\nconst app = express();\r\n\r\napp.listen(3000);', '2022-03-04 03:37:03'),
(7, 'Node app.post', 'node', 'app.post(\"/add\", (req,res) => {\r\n    const title = req.body.title;\r\n    const contents = req.body.contents;\r\n    const language = req.body.language;\r\n\r\n    db.query(\"INSERT INTO snippets (title, contents, language) VALUES (?,?,?)\", [title, contents, language], (err, rows) => {\r\n        if (err) {\r\n            console.log(err);\r\n        } else {\r\n            console.log(\"information posted???\");\r\n            res.render(\"index\");\r\n        }\r\n    });\r\n});', '2022-03-04 11:26:08'),
(8, 'MySQL Database Connection', 'node', 'const express = require(\"express\");\r\nconst mysql = require(\"mysql\");\r\nconst app = express();\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.use(express.urlencoded( { extended: true }));\r\n\r\nconst db = mysql.createConnection({\r\n    user : \"root\",\r\n    host : \"127.0.0.1\",\r\n    password : \"\",\r\n    database : \"database\"\r\n});\r\n\r\ndb.connect((err) => {\r\n    if (!err) {\r\n        console.log(\"connected!\");\r\n    }\r\n    else console.log(err);\r\n});\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"index\");\r\n});\r\n\r\napp.listen(3000);', '2022-03-04 12:02:45'),
(12, 'MySQL Wrapper', 'php', '<?php\n\nclass mysqli_wrapper {\n\n    private $connection;\n\n    public function __construct() {\n        $this->connection = new mysqli(\"localhost\", \"user\", \"pass\", \"table\");\n\n        if (!$this->connection)\n            throw new Exception(\'Error connecting to DB\');\n    }\n\n    public function __destruct() {\n        $this->connection->close();\n    }\n\n    public function query(string $query, array $args = [], string $types = null) {\n        if ($types === null && $args !== [])\n            $types = str_repeat(\'s\', count($args));\n\n        $stmt = $this->connection->prepare($query);\n\n        if (!$stmt)\n            throw new Exception(\'Error preparing query\');\n\n        if (strpos($query, \'?\') !== false)\n            $stmt->bind_param($types, ...$args);\n\n        $stmt->execute();\n\n        $result = $stmt->get_result();\n\n        $stmt->close();\n\n        return $result;\n    }\n\n    public function get_connection(): mysqli {\n        return $this->connection;\n    }\n\n}', '2022-03-04 12:17:17'),
(16, 'C++ Sharedptr and Polymorphism', 'cpp', '#define pi 3.142\r\n\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include <memory>\r\n\r\nclass CShape {\r\nprotected:\r\n    std::string _sName;\r\npublic:\r\n    virtual double getArea() {\r\n        return 0;\r\n    }\r\n\r\n    std::string getName() {\r\n        return _sName;\r\n    }\r\n    void setName(std::string sName) {\r\n        _sName = sName;\r\n    }\r\n};\r\n\r\nclass CCircle : public CShape {\r\nprotected:\r\n    double _dRadius;\r\npublic:\r\n    CCircle(std::string sName, double dRadius) {\r\n        _sName = sName;\r\n        _dRadius = dRadius;\r\n    }\r\n\r\n    double getArea() override {\r\n        return pi * (_dRadius * _dRadius);\r\n    }\r\n};\r\n\r\nclass CRect : public CShape {\r\nprivate:\r\n    double _dWidth;\r\n    double _dHeight;\r\npublic:\r\n    CRect(std::string sName, double dWidth, double dHeight) {\r\n        _sName = sName;\r\n        _dWidth = dWidth;\r\n        _dHeight = dHeight;\r\n    }\r\n\r\n    double getArea() override {\r\n        return _dWidth * _dHeight;\r\n    }\r\n};\r\n\r\nint main() {\r\n    //CCircle objCircle(\"filthyCircle\", 6.9);\r\n    //std::cout << objCircle.getArea() << std::endl;\r\n\r\n    //std::vector<CShape*> vecShapes;\r\n    //vecShapes.push_back(new CCircle(\"filthyCircle\", 6.9));\r\n\r\n    //for (auto shape : vecShapes) {\r\n    //    std::cout << shape->getName() << std::endl;\r\n    //    std::cout << shape->getArea() << std::endl;\r\n    //}\r\n\r\n    //for (auto shape : vecShapes) {\r\n    //    delete shape;\r\n    //}\r\n\r\n    std::vector<std::shared_ptr<CShape>> vecShapes;\r\n    vecShapes.push_back(std::make_shared<CCircle>(\"guffedCircle\", 5.3));\r\n\r\n    for (auto shape : vecShapes) {\r\n        std::cout << shape->getName() << std::endl;\r\n        std::cout << shape->getArea() << std::endl;\r\n    }\r\n}', '2022-03-04 12:20:59'),
(21, 'Bootstrap HTML Template', 'php', '<!doctype HTML>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n\r\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\r\n  <!--For different themes, visit https://www.bootstrapcdn.com/bootswatch/-->\r\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootswatch@4.5.2/dist/slate/bootstrap.min.css\" integrity=\"sha384-8iuq0iaMHpnH2vSyvZMSIqQuUnQA7QM+f6srIdlgBrTSEyd//AWNMyEaSF2yPzNQ\" crossorigin=\"anonymous\">\r\n  <title></title>\r\n\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\r\n  integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\r\n  crossorigin=\"anonymous\"></script>\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"></script>\r\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>', '2022-03-04 12:25:46'),
(22, 'Centered Div', 'php', '.content {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}', '2022-03-04 12:27:21'),
(24, 'Cringe Lambda Notation', 'cpp', '#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n\r\n#include <algorithm>\r\n#include <numeric>\r\n\r\nclass CStudents {\r\nprivate:\r\n    std::string _sName;\r\n    int _iGrade;\r\npublic:\r\n    CStudents(std::string, int);\r\n\r\n    std::string sGetName();\r\n    void setName(std::string);\r\n    int iGetGrade();\r\n    void setGrade(int);\r\n\r\n    bool bPassed() const;\r\n};\r\n\r\nCStudents::CStudents(std::string sName, int iGrade) {\r\n    setName(sName);\r\n    setGrade(iGrade);\r\n}\r\n\r\nstd::string CStudents::sGetName() {\r\n    return _sName;\r\n}\r\n\r\nvoid CStudents::setName(std::string sName) {\r\n    _sName = sName;\r\n}\r\n\r\nint CStudents::iGetGrade() {\r\n    return _iGrade;\r\n}\r\n\r\nvoid CStudents::setGrade(int iGrade) {\r\n    _iGrade = iGrade;\r\n}\r\n\r\nbool CStudents::bPassed() const {\r\n    return _iGrade >= 40;\r\n}\r\n\r\nvoid createStudent(std::vector<CStudents>& vecStudents) {\r\n        \r\n    while (true) {\r\n\r\n        std::cout << \"What is the student\'s name? : \";\r\n        std::string sName = \"\";\r\n        std::cin >> sName;\r\n\r\n        std::cout << \"What grade did \" << sName << \" get? (0 - 100): \";\r\n        int iGrade;\r\n        std::cin >> iGrade;\r\n\r\n        vecStudents.push_back(CStudents(sName, iGrade));\r\n\r\n        if (vecStudents.size() >= 3) {\r\n            std::cout << \"Would you like to add another user? y/n : \";\r\n            char sInput;\r\n            std::cin >> sInput;\r\n\r\n            if (sInput == \'n\' || sInput == \'N\') {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndouble calcAverage(std::vector<CStudents>& vecStudents) {\r\n    //double dAverage = 0;\r\n\r\n    //for (int i = 0;\r\n    //    i < vecStudents.size();\r\n    //    i++) {\r\n    //    dAverage += vecStudents.at(i).iGetGrade();\r\n    //}\r\n\r\n    //dAverage /= vecStudents.size();\r\n    //\r\n    //return dAverage;\r\n\r\n    return std::accumulate(vecStudents.begin(), vecStudents.end(), 0, [](int iSum, CStudents student) {\r\n        return iSum + student.iGetGrade();\r\n    }) / vecStudents.size();\r\n}\r\n\r\nCStudents highestGrade(std::vector<CStudents>& vecStudents) {\r\n    /*CStudents objHighestStudent = vecStudents[0];\r\n\r\n    for (int i = 0;\r\n        i < vecStudents.size();\r\n        i++) {\r\n        int iGrade = vecStudents.at(i).iGetGrade();\r\n\r\n        if (vecStudents[i].iGetGrade() > objHighestStudent.iGetGrade()) {\r\n            objHighestStudent = vecStudents[i];\r\n        }\r\n    }\r\n\r\n    return objHighestStudent;*/\r\n\r\n    return *std::max_element(vecStudents.begin(), vecStudents.end(), [](CStudents& a, CStudents& b) {\r\n        return a.iGetGrade() < b.iGetGrade();\r\n    });\r\n}\r\n\r\nCStudents lowestGrade(std::vector<CStudents>& vecStudents) {\r\n    //CStudents objLowestStudent = vecStudents[0];\r\n\r\n    //for (int i = 0;\r\n    //    i < vecStudents.size();\r\n    //    i++) {\r\n    //    int iGrade = vecStudents.at(i).iGetGrade();\r\n\r\n    //    if (vecStudents[i].iGetGrade() < objLowestStudent.iGetGrade()) {\r\n    //        objLowestStudent = vecStudents[i];\r\n    //    }\r\n    //}\r\n\r\n    //return objLowestStudent;\r\n\r\n    return *std::min_element(vecStudents.begin(), vecStudents.end(), [](CStudents& a, CStudents& b) {\r\n        return a.iGetGrade() < b.iGetGrade();\r\n    });\r\n}\r\n\r\nint calcPassed(std::vector<CStudents>& vecStudents) {\r\n    //int iPassedAmount = 0;\r\n\r\n    //for (int i = 0;\r\n    //    i < vecStudents.size();\r\n    //    i++) {\r\n    //    if (vecStudents.at(i).bPassed()) {\r\n    //        iPassedAmount++;\r\n    //    }\r\n    //}\r\n\r\n    //return iPassedAmount;\r\n\r\n    return std::count_if(vecStudents.begin(), vecStudents.end(), [](CStudents& student) {\r\n        return student.bPassed();\r\n    });\r\n}\r\n\r\nvoid outputStats(std::vector<CStudents>& vecStudents) {\r\n\r\n    std::cout << \"The average grade is \" << calcAverage(vecStudents) << std::endl;\r\n    std::cout << \"The highest grade is \" << highestGrade(vecStudents).iGetGrade() << std::endl;\r\n    std::cout << \"The lowest grade is \" << lowestGrade(vecStudents).iGetGrade() << std::endl;\r\n    std::cout << \"The pass amount is \" << calcPassed(vecStudents) << std::endl;\r\n}\r\n\r\nint main() {\r\n\r\n    std::vector<CStudents> vecStudents;\r\n    \r\n    createStudent(vecStudents);\r\n\r\n    for (CStudents student : vecStudents) {\r\n        std::cout << student.sGetName() << \" : \" << student.iGetGrade() << std::endl;\r\n    }\r\n\r\n    outputStats(vecStudents);\r\n\r\n    //std::cout << \"The highest grade is \" << highestGrade(vecStudents) << std::endl;\r\n}\r\n\r\n', '2022-03-10 10:31:13'),
(27, 'Route Wrapper', 'php', '<?php\r\n\r\nclass route_wrapper {\r\n\r\n    private function do_route($file, $route) {\r\n\r\n        if (!empty($_REQUEST[\'uri\'])) {\r\n            $route = preg_replace(\"/(^\\/)|(\\/$)/\",\"\",$route);\r\n            $reqUri =  preg_replace(\"/(^\\/)|(\\/$)/\",\"\",$_REQUEST[\'uri\']);\r\n        } else {\r\n            $reqUri = \"/\";\r\n        }\r\n\r\n        if ($reqUri == $route) {\r\n            $params = [];\r\n            include($file);\r\n            exit();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function add($route,$file) {\r\n\r\n        $params = [];\r\n        $paramKey = [];\r\n\r\n        preg_match_all(\"/(?<={).+?(?=})/\", $route, $paramMatches);\r\n\r\n        if (empty($paramMatches[0])) {\r\n            $this->do_route($file,$route);\r\n            return;\r\n        }\r\n\r\n        foreach ($paramMatches[0] as $key) {\r\n            $paramKey[] = $key;\r\n        }\r\n\r\n        if (!empty($_REQUEST[\'uri\'])) {\r\n            $route = preg_replace(\"/(^\\/)|(\\/$)/\",\"\",$route);\r\n            $reqUri =  preg_replace(\"/(^\\/)|(\\/$)/\",\"\",$_REQUEST[\'uri\']);\r\n        } else {\r\n            $reqUri = \"/\";\r\n        }\r\n\r\n        $uri = explode(\"/\", $route);\r\n\r\n        $indexNum = []; \r\n\r\n        foreach ($uri as $index => $param) {\r\n            if (preg_match(\"/{.*}/\", $param)) {\r\n                $indexNum[] = $index;\r\n            }\r\n        }\r\n\r\n        $reqUri = explode(\"/\", $reqUri);\r\n\r\n        foreach ($indexNum as $key => $index) {\r\n            if (empty($reqUri[$index])) {\r\n                return;\r\n            }\r\n\r\n            $params[$paramKey[$key]] = $reqUri[$index];\r\n\r\n            $reqUri[$index] = \"{.*}\";\r\n        }\r\n\r\n        $reqUri = implode(\"/\",$reqUri);\r\n\r\n        $reqUri = str_replace(\"/\", \'\\\\/\', $reqUri);\r\n\r\n        if (preg_match(\"/$reqUri/\", $route)) {\r\n            include($file);\r\n            exit();\r\n\r\n        }\r\n    }\r\n\r\n    function not_found($file) {\r\n        include($file);\r\n        exit();\r\n    }\r\n}', '2022-03-11 10:01:37'),
(28, 'C++ Vector of Pointers', 'cpp', '#include <iostream>\r\n#include <vector>\r\n\r\nclass CUser {\r\npublic:\r\n    void setName(std::string name) { _name = name; }\r\n    void setAge(int age) { _age = age; }\r\n\r\n    std::string getName() const { return _name; }\r\n    int getAge() const { return _age; }\r\n\r\n    CUser(std::string name, int age) {\r\n        _name = name;\r\n        _age = age;\r\n    }\r\n    ~CUser();\r\nprivate:\r\n    std::string _name;\r\n    int _age;\r\n};\r\n\r\nclass CCourse {\r\npublic:\r\n    CCourse(std::string name, int maxStudents) {\r\n        _name = name;\r\n        _maxStudents = maxStudents;\r\n    }\r\n\r\n    bool enrol(CUser* user) {\r\n        if (_students.size() < _maxStudents) {\r\n            _students.push_back(user);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    void print() {\r\n        std::cout << \"Course Name : \" << _name << std::endl;\r\n        std::cout << \"Students : \" << _students.size() << \" / \" << _maxStudents << std::endl;\r\n        std::cout << \"-------------------------------\" << std::endl;\r\n\r\n        for (auto student : _students) {\r\n            std::cout << student->getName() << \" ( \" << student->getAge() << \" )\" << std::endl;\r\n        }\r\n\r\n        std::cout << \"-------------------------------\" << std::endl;\r\n    }\r\nprivate:\r\n    std::string _name;\r\n    int _maxStudents;\r\n    std::vector<CUser*> _students;\r\n};\r\n\r\nint main() {\r\n    std::vector<CUser*> users;\r\n    std::vector<CCourse> courses;\r\n\r\n    CUser* user = new CUser(\"j-dawg\", 33);\r\n    CUser* user2 = new CUser(\"jackson macmANUS\", 6);\r\n\r\n    users.push_back(user);\r\n\r\n    CCourse computingCourse(\"computing\", 3);\r\n    CCourse bricklayingCourse(\"level 1 bricklaying\", 2);\r\n\r\n    computingCourse.enrol(user);\r\n    computingCourse.enrol(user2);\r\n\r\n    bricklayingCourse.enrol(user2);\r\n\r\n    courses.push_back(computingCourse);\r\n    courses.push_back(bricklayingCourse);\r\n\r\n    for (auto course : courses) {\r\n        course.print();\r\n    }\r\n\r\n    user->setName(\"kev\");\r\n\r\n    for (auto course : courses) {\r\n        course.print();\r\n    }\r\n}\r\n', '2022-03-18 09:51:54'),
(33, 'Ben\'s website help', 'php', '<?php\r\n    require (\"php/_connect.php\");\r\n  require (\"php/courseQuery.php\");\r\n    session_start();\r\n    //The user will be returned back to the login.php page if a session hasnt been instantiated\r\n    if (!isset($_SESSION[\'userID\']))\r\n    {\r\n        header(\"Location: login.php\");\r\n    }\r\n    //If the admin field in $USER contains \"user\" - the person will be redirected to the user page instead\r\n    if ($_SESSION[\'admin\'] == \"user\")\r\n    {\r\n        header(\"Location: userpage.php\");\r\n    }\r\n\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <!-- BOOTSTRAP CDN LINK-->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n    integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n\r\n  <!-- PAGE TITLE-->\r\n  <title>Administrator Page!</title>\r\n</head>\r\n\r\n<body class=\"bg-light vh-100\">\r\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n    <div class=\"container-fluid\">\r\n      <a class=\"navbar-brand text-light\"> Administrator Area</a>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link active text-light\" aria-current=\"page\" href=\"adminpage.php\">Database</a>\r\n          </li>\r\n        </ul>\r\n        <button class=\"btn btn-outline-danger\" type=\"submit\">Logout</button>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  <?php\r\n$query = \"SELECT * FROM `courses`\";\r\n$result = mysqli_query($connect, $query);\r\n  while($rows=mysqli_fetch_assoc($result))\r\n  {\r\n  ?>\r\n  <section class=\"cardClass justify-content-center d-flex p-5\">\r\n    <div class=\"card\" style=\"width: 18rem; justify-content-center\">\r\n      <div class=\"card-body\">\r\n        <h3 class=\"card-title text-center p-1\"><?=$rows[\'courseName\'] ?></h3>\r\n        <h5 class=\"card-title text-center p-2\">Lecturer: <?=$rows[\'courseLecturer\'] ?></h5>\r\n        <p class=\"card-text\"><?=[\'courseDescription\'] ?></p>\r\n        <div class=\"mb-3 text-center p-2\">\r\n          <button type=\"submit\" class=\"btn btn-danger\">Expand</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n  <?php\r\n  }\r\n  ?>\r\n  <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\r\n    integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\r\n    integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\">\r\n  </script>\r\n  <script src=\"https://www.google.com/recaptcha/api.js?render=6LeSeyYfAAAAAKx-RJpfNm26ZDzi8N82T31KwMVA\"></script>\r\n</body>\r\n\r\n</html>', '2022-03-30 00:45:19'),
(34, 'File saving', 'cpp', '#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n\r\n//fstream is a class that allows us to read and write to files\r\n#include <fstream>\r\n\r\nclass User\r\n{\r\nprivate:\r\n    std::string _name;\r\n    int _age;\r\npublic:\r\n    //Constructor\r\n    User(std::string name, int age)\r\n    {\r\n        _name = name;\r\n        _age = age;\r\n    }\r\n\r\n    //Gets and Sets\r\n    std::string Name() const { return _name; }\r\n    int Age() const { return _age; }\r\n    void Name(std::string name) { _name = name; }\r\n    void Age(int age) { _age = age; }\r\n};\r\n\r\nvoid ExportCSV(std::vector<User>& users, std::string fileName = \"users.csv\")\r\n{\r\n    //Export to CSV\r\n    std::ofstream file;\r\n    file.open(fileName);\r\n\r\n    //write data to the file\r\n    for(auto & user : users) {\r\n        file << user.Name() << \",\" << user.Age() << std::endl;\r\n    }\r\n\r\n    //close the file\r\n    file.close();\r\n}\r\n\r\nvoid LoadCSV(std::vector<User>& users, std::string fileName = \"users.csv\")\r\n{\r\n    //Import from CSV\r\n    std::ifstream file;\r\n\r\n    file.open(fileName);\r\n\r\n    std::string line = \"\";\r\n\r\n    while (std::getline(file, line)) {\r\n        std::string name = line.substr(0, line.find(\",\"));\r\n        std::string age = line.substr(line.find(\",\") + 1);\r\n\r\n        users.push_back(User(name, std::stoi(age)));\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    //Create a vector of User objects\r\n    std::vector<User> users;\r\n\r\n    //Add 3 users to the vector\r\n    //users.push_back(User(\"Dorothy\", 89));\r\n    //users.push_back(User(\"Audrey\", 72));\r\n    //users.push_back(User(\"Margaret\", 93));\r\n\r\n    //Print the names and ages of the users\r\n    LoadCSV(users);\r\n\r\n    for (auto user : users)\r\n    {\r\n        std::cout << user.Name() << \" is \" << user.Age() << \" years old.\" << std::endl;\r\n    }\r\n\r\n    //ExportCSV(users);\r\n\r\n}', '2022-03-31 08:43:09'),
(35, 'SCSS', 'php', 'body {\n    margin: 0;\n    width: 100vw;\n    height: 100vh;\n\n    //grid!! \n    .grid {\n        width: 100%;\n        height: 100%;\n\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: 50px;\n\n        // our child classes are SOUND!\n        &>.child {\n            background-color: aquamarine;\n        }\n\n        // the second child is gang!!\n        .child:nth-child(2) {\n            background-color: brown;\n        }\n\n        //every odd is green!\n        .child:nth-child(odd) {\n            background-color: green;\n        }\n    }\n}\n\n@media screen and (max-width: 600px) {\n    .grid {\n        grid-template-columns: repeat(2, 1fr) !important;\n    }\n}', '2022-04-08 11:54:21');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `snippets`
--
ALTER TABLE `snippets`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `snippets`
--
ALTER TABLE `snippets`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=38;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
